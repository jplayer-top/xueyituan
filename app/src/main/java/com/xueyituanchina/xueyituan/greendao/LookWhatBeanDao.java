package com.xueyituanchina.xueyituan.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.xueyituanchina.xueyituan.mpbe.bean.LookWhatBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOOK_WHAT_BEAN".
*/
public class LookWhatBeanDao extends AbstractDao<LookWhatBean, Long> {

    public static final String TABLENAME = "LOOK_WHAT_BEAN";

    /**
     * Properties of entity LookWhatBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Goods_id = new Property(1, int.class, "goods_id", false, "GOODS_ID");
        public final static Property Goods_title = new Property(2, String.class, "goods_title", false, "GOODS_TITLE");
        public final static Property Goods_thumb_img = new Property(3, String.class, "goods_thumb_img", false, "GOODS_THUMB_IMG");
        public final static Property Goods_subtitle = new Property(4, String.class, "goods_subtitle", false, "GOODS_SUBTITLE");
        public final static Property Goods_best_price = new Property(5, String.class, "goods_best_price", false, "GOODS_BEST_PRICE");
        public final static Property Goods_org_price = new Property(6, String.class, "goods_org_price", false, "GOODS_ORG_PRICE");
        public final static Property Dist = new Property(7, String.class, "dist", false, "DIST");
    }


    public LookWhatBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LookWhatBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOOK_WHAT_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GOODS_ID\" INTEGER NOT NULL ," + // 1: goods_id
                "\"GOODS_TITLE\" TEXT," + // 2: goods_title
                "\"GOODS_THUMB_IMG\" TEXT," + // 3: goods_thumb_img
                "\"GOODS_SUBTITLE\" TEXT," + // 4: goods_subtitle
                "\"GOODS_BEST_PRICE\" TEXT," + // 5: goods_best_price
                "\"GOODS_ORG_PRICE\" TEXT," + // 6: goods_org_price
                "\"DIST\" TEXT);"); // 7: dist
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOOK_WHAT_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LookWhatBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGoods_id());
 
        String goods_title = entity.getGoods_title();
        if (goods_title != null) {
            stmt.bindString(3, goods_title);
        }
 
        String goods_thumb_img = entity.getGoods_thumb_img();
        if (goods_thumb_img != null) {
            stmt.bindString(4, goods_thumb_img);
        }
 
        String goods_subtitle = entity.getGoods_subtitle();
        if (goods_subtitle != null) {
            stmt.bindString(5, goods_subtitle);
        }
 
        String goods_best_price = entity.getGoods_best_price();
        if (goods_best_price != null) {
            stmt.bindString(6, goods_best_price);
        }
 
        String goods_org_price = entity.getGoods_org_price();
        if (goods_org_price != null) {
            stmt.bindString(7, goods_org_price);
        }
 
        String dist = entity.getDist();
        if (dist != null) {
            stmt.bindString(8, dist);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LookWhatBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getGoods_id());
 
        String goods_title = entity.getGoods_title();
        if (goods_title != null) {
            stmt.bindString(3, goods_title);
        }
 
        String goods_thumb_img = entity.getGoods_thumb_img();
        if (goods_thumb_img != null) {
            stmt.bindString(4, goods_thumb_img);
        }
 
        String goods_subtitle = entity.getGoods_subtitle();
        if (goods_subtitle != null) {
            stmt.bindString(5, goods_subtitle);
        }
 
        String goods_best_price = entity.getGoods_best_price();
        if (goods_best_price != null) {
            stmt.bindString(6, goods_best_price);
        }
 
        String goods_org_price = entity.getGoods_org_price();
        if (goods_org_price != null) {
            stmt.bindString(7, goods_org_price);
        }
 
        String dist = entity.getDist();
        if (dist != null) {
            stmt.bindString(8, dist);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LookWhatBean readEntity(Cursor cursor, int offset) {
        LookWhatBean entity = new LookWhatBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // goods_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goods_title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goods_thumb_img
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goods_subtitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // goods_best_price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // goods_org_price
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // dist
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LookWhatBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoods_id(cursor.getInt(offset + 1));
        entity.setGoods_title(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoods_thumb_img(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoods_subtitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoods_best_price(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGoods_org_price(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDist(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LookWhatBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LookWhatBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LookWhatBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
